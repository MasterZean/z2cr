namespace sys.core.lang;

using sys.core.Stream;
using sys.core.OutputFormat;
using sys.core.ConvertUtf8;

class DWord {
	const Zero: DWord = 0;
	const One: DWord = 1;

	const Min: DWord = 0;
	const Max: DWord = 4'294'967'295u;

	const IsSigned = false;
	const IsInteger = true;
	
	const MaxDigitsLow = 9;
	const MaxDigitsHigh = 10;

	property Abs: DWord {
		return this;
	}
	
	property Sqr: DWord {
		return this * this;
	}

	property Sqrt: DWord {
		return DWord{Double{this}.Sqrt};
	}

	property Floor: DWord {
		return this;
	}

	property Ceil: DWord {
		return this;
	}

	property Round: DWord {
		return this;
	}

	property Trunc: DWord {
		return this;
	}
	
	def Clamp(min: DWord, max: DWord) = Intrinsic.Clamp;
	
	func Clamped(min: DWord, max: DWord): DWord = Intrinsic.Clamped;

	this(string: String) {
		val s = ReadSlice<Byte>{string};
		this = ConvertUtf8.ParseUns<DWord>(s);
	}
	
	func ToString(): String {
		val buf: CArray<Byte, ConvertUtf8.MaxDWordBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DWordAsText(s, this);
		return String{s};
	}

#region Saturation

	this Saturated(value: Int) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = DWord{value};
	}

	this Saturated(value: DWord) {
		this = value;
	}

	this Saturated(value: Long) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = DWord{value};
	}

	this Saturated(value: QWord) {
		this = value > QWord{Max} ? Max : DWord{value};
	}

	this Saturated(value: Double) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = DWord{value};
	}
	
	this Saturated(value: String) {
		val s = ReadSlice<Byte>{value};
		this = ConvertUtf8.ParseUnsSaturated<DWord>(s);
	}

#endregion
	
#region IO

	func @write(ref stream: Stream) {
		stream.RawWrite(this);
	}

	/*func @write(ref stream: Stream, format: OutputFormat) {
		stream.RawWrite(this, format);
	}*/
	
	func @put(ref stream: Stream) {
		stream.RawPutU32(this);
	}

	def @get(ref stream: Stream) {
		this = stream.RawGetU32();
	}

#endregion
}