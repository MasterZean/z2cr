namespace sys.core.lang;

using sys.core.Stream;
using sys.core.OutputFormat;
using sys.core.ConvertUtf8;

class Word {
	const Zero: Word = 0;
	const One: Word = 1;

	const Min: Word = 0;
	const Max: Word = 65535;

	const IsSigned = false;
	const IsInteger = true;

	const MaxDigitsLow = 4;
	const MaxDigitsHigh = 5;
	
	property Abs: Word {
		return this;
	}
	
	property Sqr: Word {
		return this * this;
	}

	property Sqrt: Word {
		return Word{Double{this}.Sqrt};
	}

	property Floor: Word {
		return this;
	}

	property Ceil: Word {
		return this;
	}

	property Round: Word {
		return this;
	}
	
	property Trunc: Word {
		return this;
	}
	
	def Clamp(min: Word, max: Word) = Intrinsic.Clamp;
	
	func Clamped(min: Word, max: Word): Word = Intrinsic.Clamped;

	this(string: String) {
		val s = ReadSlice<Byte>{string};
		this = Word{ConvertUtf8.ParseUns<DWord>(s)};
	}

	func ToString(): String {
		val buf: CArray<Byte, ConvertUtf8.MaxWordBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DWordAsText(s, this);
		return String{s};
	}

#region Saturation

	this Saturated(value: Int) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Word{value};
	}

	this Saturated(value: DWord) {
		this = value > DWord{Max} ? Max : Word{value};
	}

	this Saturated(value: Long) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Word{value};
	}

	this Saturated(value: QWord) {
		this = value > QWord{Max} ? Max : Word{value};
	}

	this Saturated(value: Double) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Word{value};
	}
	
	this Saturated(value: String) {
		val s = ReadSlice<Byte>{value};
		this.Saturated{ConvertUtf8.ParseUnsSaturated<DWord>(s)};
	}

#endregion

#region IO

	func @write(ref stream: Stream) {
		stream.RawWrite(this);
	}

	/*func @write(ref stream: Stream, format: OutputFormat) {
		stream.RawWrite(this, format);
	}*/
	
	func @put(ref stream: Stream) {
		stream.RawPutU16(this);
	}

	def @get(ref stream: Stream) {
		this = stream.RawGetU16();
	}

#endregion
}