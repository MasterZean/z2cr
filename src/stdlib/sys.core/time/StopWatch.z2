namespace sys.core;

#if Compiler.Platform == "WIN32"

using microsoft.windows.Win32;

class StopWatch {
	this() {
		Reset();
	}
	
	this Stopped() {
	}

	def Reset() {
		Win32.QueryPerformanceFrequency(Ptr{freq});
		Win32.QueryPerformanceCounter(Ptr{start});
	}

	func Elapsed(): Double {
	    val stop: Long;
		Win32.QueryPerformanceCounter(Ptr{stop});
		
		return (stop - start) * 1000.0 / freq;
	}
	
	property IsHighResolution: Bool {
		return true;
	}

	private val start: Long;
	private val freq: Long;
}
 
#else

using ieee.posix.Posix;

class StopWatch {
	this() {
		Reset();
	}
	
	this Stopped() {
	}

	def Reset() {
		Posix.clock_gettime(0, Ptr{start});
	}

	func Elapsed(): Double {
	    val end = ieee.posix.timespec{};
		Posix.clock_gettime(0, Ptr{end});
		
		return Double{end.tv_sec - start.tv_sec} * 1000.0 + Double{end.tv_nsec - start.tv_nsec} / 1000000.0;
	}
	
	property IsHighResolution: Bool {
		return true;
	}

	private val start = ieee.posix.timespec{};
}
 
#endif