namespace org.z2legacy.ut;

class SierpinskiTest {
	val border = '#';
	val fill = 'O';
	val backround = ' ';
	
	def drawTriangle(base: Int, x: Int, count: Int, gap: Int) {
		val bs = base + (base % 2 == 0 ? 1 : 0);

		for (val lines = 0; lines < bs; lines = lines + 2) {
			val spaces = (bs - lines) / 2;
			val startgap = x;
			
			for (val triangle = 0; triangle < count; triangle++) {
				val i = 0;
	
				for (i = 0; i < startgap + spaces; i++)
					System.Out << backround;
				if (startgap > 0 )
					startgap = 0;
				
				for (i = 0; i <= lines; i++)
					System.Out << ((lines == bs - 1 || (i == 0 || i == lines)) ? border : fill);
				
				for (i = 0; i < spaces + gap; i++)
					System.Out << backround;
			}
			
			System.Out << '\n';
		}
	}
	
	def @main() {
		border = '*';
		fill = '*';
		
		val size = 9;
		val left = 0;
		
		drawTriangle(size, left + size + size / 2 + 2, 1, 0);
		drawTriangle(size, left + size + 1, 2, 1);
		drawTriangle(size, left + size / 2 + 1, 2, size + 2);
		drawTriangle(size, left, 4, 1);
	}
}