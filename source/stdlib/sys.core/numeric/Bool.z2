namespace sys.core.lang;

using sys.core.Stream;
using sys.core.OutputFormat;

class Bool {
	const Min = false;
	const Max = true;

	const IsSigned = false;
	const IsInteger = false;

	def Clamp(min: Bool, max: Bool) = Intrinsic.Clamp;
	
	func Clamped(min: Bool, max: Bool): Int = Intrinsic.Clamped;
	
#region ToString

    this(string: String) {
        val i = 0p;
        while (i < string.Length && string[i] <= ' ')
			i++;
        
        val temp = string.SysDataPointer + i;
        
        if (temp[0] == 't' && temp[1] == 'r' && temp[2] == 'u' && temp[3] == 'e' && temp[4] <= ' ')
            this = true;
        else if (temp[0] == 'f' && temp[1] == 'a' && temp[2] == 'l' && temp[3] == 's' && temp[4] == 'e' && temp[5] <= ' ')
            this = false;
        else
            throw sys.core.IllegalArgumentException{};
    }
    
	func ToString(): String {
		if (this == true)
			return "true";
		else
			return "false";
	}

#endregion

#region Serialize

	func @write(ref stream: Stream) {
		stream.RawWrite(this);
	}

	/*func @write(ref stream: Stream, format: OutputFormat) {
		stream.RawWrite(this, format);
	}*/
	
	func @put(ref stream: Stream) {
		stream.RawPutU8(Byte{this});
	}

	def @get(ref stream: Stream) {
		this = Bool{stream.RawGetU8()};
	}

#endregion
}