namespace sys.core.lang;

using sys.core.Stream;
using sys.core.OutputFormat;
using sys.core.ConvertUtf8;

class Short {
	const Zero: Short = 0;
	const One: Short = 1;

	const Min: Short = -32768;
	const Max: Short = 32767;

	const IsSigned = true;
	const IsInteger = true;

	const MaxDigitsLow = 4;
	const MaxDigitsHigh = 5;

	property Abs: Short {
		return this > 0 ? this : -this;
	}

	property Sqr: Short {
		return this * this;
	}

	property Sqrt: Short {
		return Short{Double{this}.Sqrt};
	}

	property Floor: Short {
		return this;
	}

	property Ceil: Short {
		return this;
	}

	property Round: Short {
		return this;
	}

	property Trunc: Short {
		return this;
	}
	
	def Clamp(min: Short, max: Short) = Intrinsic.Clamp;
	
	func Clamped(min: Short, max: Short): Short = Intrinsic.Clamped;


	this(string: String) {
		val s = ReadSlice<Byte>{string};
		this = Short{ConvertUtf8.ParseSig<Int>(s)};
	}

	func ToString(): String {
		val buf: CArray<Byte, ConvertUtf8.MaxShortBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.IntAsText(s, this);
		return String{s};
	}

#region Saturation

	this Saturated(value: Int) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Short{value};
	}

	this Saturated(value: DWord) {
		this = value > DWord{Max} ? Max : Short{value};
	}

	this Saturated(value: Long) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Short{value};
	}

	this Saturated(value: QWord) {
		this = value > QWord{Max} ? Max : Short{value};
	}

	this Saturated(value: Double) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Short{value};
	}
	
	this Saturated(value: String) {
		val s = ReadSlice<Byte>{value};
		this = Short.Saturated{ConvertUtf8.ParseSigSaturated<Int>(s)};
	}

#endregion
	
#region IO

	func @write(ref stream: Stream) {
		stream.RawWrite(this);
	}

	/*func @write(ref stream: Stream, format: OutputFormat) {
		stream.RawWrite(this, format);
	}*/
	
	func @put(ref stream: Stream) {
		stream.RawPutS16(this);
	}

	def @get(ref stream: Stream) {
		this = stream.RawGetS16();
	}

#endregion
}