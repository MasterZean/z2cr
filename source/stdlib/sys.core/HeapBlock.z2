namespace sys.core;

class HeapBlock<T: Class>: Slice<T> {
	private this() {
	}
	
	this(aSize: PtrSize) {
		length = aSize;
		
		if (length > 0) {
			ptr = Ptr<T>{System.Malloc(aSize * T.@size)};
			if (ptr == null)
				length = 0;
		}
		
		Construct();
	}
	
	this(aSize: PtrSize, value: T) {
		length = aSize;
		
		if (length > 0) {
			ptr = Ptr<T>{System.Malloc(aSize * T.@size)};
			if (ptr == null)
				length = 0;
		}
		
		Construct(value);
	}
	
	this(copy: HeapBlock<T>) {
		length = copy.Length;
		ptr = Ptr<T>{System.Malloc(copy.Length * T.@size)};
		System.MemCopy(Ptr<Byte>{ptr}, Ptr<Byte>{copy.Data}, copy.Length * T.@size);
	}
	
	~this() {
		if (ptr != null) {
			System.Mfree(Ptr<Byte>{ptr});
			ptr = null;
		}
	}
	
	func Slice(): Slice<T> {
		return ::Slice<T>{ptr, length};
	}
}